// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mua/im_relation.proto

/*
Package relation is a generated protocol buffer package.

It is generated from these files:
	mua/im_relation.proto

It has these top-level messages:
	Group
	PersonalRelation
	GroupRelation
	FollowReq
	FollowRsp
	UnfollowReq
	UnfollowRsp
	BlockReq
	BlockRsp
	UnblockReq
	UnblockRsp
	GetPersonalRelationReq
	GetPersonalRelationRsp
	ListPersonalRelationReq
	ListPersonalRelationRsp
	JoinGroupReq
	JoinGroupRsp
	QuitGroupReq
	QuitGroupRsp
	CreateGroupReq
	CreateGroupRsp
	ChangeGroupInfoReq
	ChangeGroupInfoRsp
	UpgradeGroupReq
	UpgradeGroupRsp
	GetGroupReq
	GetGroupRsp
*/
package relation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Relation service

type RelationService interface {
	Follow(ctx context.Context, in *FollowReq, opts ...client.CallOption) (*FollowRsp, error)
	Unfollow(ctx context.Context, in *UnfollowReq, opts ...client.CallOption) (*UnfollowRsp, error)
	Block(ctx context.Context, in *BlockReq, opts ...client.CallOption) (*BlockRsp, error)
	Unblock(ctx context.Context, in *UnblockReq, opts ...client.CallOption) (*UnblockRsp, error)
	GetPersonalRelation(ctx context.Context, in *GetPersonalRelationReq, opts ...client.CallOption) (*GetPersonalRelationRsp, error)
	ListPersonalRelation(ctx context.Context, in *ListPersonalRelationReq, opts ...client.CallOption) (*ListPersonalRelationRsp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...client.CallOption) (*CreateGroupRsp, error)
	GetGroup(ctx context.Context, in *GetGroupReq, opts ...client.CallOption) (*GetGroupRsp, error)
	ChangeGroupInfo(ctx context.Context, in *ChangeGroupInfoReq, opts ...client.CallOption) (*ChangeGroupInfoRsp, error)
	UpgradeGroup(ctx context.Context, in *UpgradeGroupReq, opts ...client.CallOption) (*UpgradeGroupRsp, error)
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...client.CallOption) (*JoinGroupRsp, error)
	QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...client.CallOption) (*QuitGroupRsp, error)
}

type relationService struct {
	c    client.Client
	name string
}

func NewRelationService(name string, c client.Client) RelationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "mua.im.relation"
	}
	return &relationService{
		c:    c,
		name: name,
	}
}

func (c *relationService) Follow(ctx context.Context, in *FollowReq, opts ...client.CallOption) (*FollowRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.Follow", in)
	out := new(FollowRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) Unfollow(ctx context.Context, in *UnfollowReq, opts ...client.CallOption) (*UnfollowRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.Unfollow", in)
	out := new(UnfollowRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) Block(ctx context.Context, in *BlockReq, opts ...client.CallOption) (*BlockRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.Block", in)
	out := new(BlockRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) Unblock(ctx context.Context, in *UnblockReq, opts ...client.CallOption) (*UnblockRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.Unblock", in)
	out := new(UnblockRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) GetPersonalRelation(ctx context.Context, in *GetPersonalRelationReq, opts ...client.CallOption) (*GetPersonalRelationRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.GetPersonalRelation", in)
	out := new(GetPersonalRelationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) ListPersonalRelation(ctx context.Context, in *ListPersonalRelationReq, opts ...client.CallOption) (*ListPersonalRelationRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.ListPersonalRelation", in)
	out := new(ListPersonalRelationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...client.CallOption) (*CreateGroupRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.CreateGroup", in)
	out := new(CreateGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) GetGroup(ctx context.Context, in *GetGroupReq, opts ...client.CallOption) (*GetGroupRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.GetGroup", in)
	out := new(GetGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) ChangeGroupInfo(ctx context.Context, in *ChangeGroupInfoReq, opts ...client.CallOption) (*ChangeGroupInfoRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.ChangeGroupInfo", in)
	out := new(ChangeGroupInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) UpgradeGroup(ctx context.Context, in *UpgradeGroupReq, opts ...client.CallOption) (*UpgradeGroupRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.UpgradeGroup", in)
	out := new(UpgradeGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...client.CallOption) (*JoinGroupRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.JoinGroup", in)
	out := new(JoinGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...client.CallOption) (*QuitGroupRsp, error) {
	req := c.c.NewRequest(c.name, "Relation.QuitGroup", in)
	out := new(QuitGroupRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Relation service

type RelationHandler interface {
	Follow(context.Context, *FollowReq, *FollowRsp) error
	Unfollow(context.Context, *UnfollowReq, *UnfollowRsp) error
	Block(context.Context, *BlockReq, *BlockRsp) error
	Unblock(context.Context, *UnblockReq, *UnblockRsp) error
	GetPersonalRelation(context.Context, *GetPersonalRelationReq, *GetPersonalRelationRsp) error
	ListPersonalRelation(context.Context, *ListPersonalRelationReq, *ListPersonalRelationRsp) error
	CreateGroup(context.Context, *CreateGroupReq, *CreateGroupRsp) error
	GetGroup(context.Context, *GetGroupReq, *GetGroupRsp) error
	ChangeGroupInfo(context.Context, *ChangeGroupInfoReq, *ChangeGroupInfoRsp) error
	UpgradeGroup(context.Context, *UpgradeGroupReq, *UpgradeGroupRsp) error
	JoinGroup(context.Context, *JoinGroupReq, *JoinGroupRsp) error
	QuitGroup(context.Context, *QuitGroupReq, *QuitGroupRsp) error
}

func RegisterRelationHandler(s server.Server, hdlr RelationHandler, opts ...server.HandlerOption) error {
	type relation interface {
		Follow(ctx context.Context, in *FollowReq, out *FollowRsp) error
		Unfollow(ctx context.Context, in *UnfollowReq, out *UnfollowRsp) error
		Block(ctx context.Context, in *BlockReq, out *BlockRsp) error
		Unblock(ctx context.Context, in *UnblockReq, out *UnblockRsp) error
		GetPersonalRelation(ctx context.Context, in *GetPersonalRelationReq, out *GetPersonalRelationRsp) error
		ListPersonalRelation(ctx context.Context, in *ListPersonalRelationReq, out *ListPersonalRelationRsp) error
		CreateGroup(ctx context.Context, in *CreateGroupReq, out *CreateGroupRsp) error
		GetGroup(ctx context.Context, in *GetGroupReq, out *GetGroupRsp) error
		ChangeGroupInfo(ctx context.Context, in *ChangeGroupInfoReq, out *ChangeGroupInfoRsp) error
		UpgradeGroup(ctx context.Context, in *UpgradeGroupReq, out *UpgradeGroupRsp) error
		JoinGroup(ctx context.Context, in *JoinGroupReq, out *JoinGroupRsp) error
		QuitGroup(ctx context.Context, in *QuitGroupReq, out *QuitGroupRsp) error
	}
	type Relation struct {
		relation
	}
	h := &relationHandler{hdlr}
	return s.Handle(s.NewHandler(&Relation{h}, opts...))
}

type relationHandler struct {
	RelationHandler
}

func (h *relationHandler) Follow(ctx context.Context, in *FollowReq, out *FollowRsp) error {
	return h.RelationHandler.Follow(ctx, in, out)
}

func (h *relationHandler) Unfollow(ctx context.Context, in *UnfollowReq, out *UnfollowRsp) error {
	return h.RelationHandler.Unfollow(ctx, in, out)
}

func (h *relationHandler) Block(ctx context.Context, in *BlockReq, out *BlockRsp) error {
	return h.RelationHandler.Block(ctx, in, out)
}

func (h *relationHandler) Unblock(ctx context.Context, in *UnblockReq, out *UnblockRsp) error {
	return h.RelationHandler.Unblock(ctx, in, out)
}

func (h *relationHandler) GetPersonalRelation(ctx context.Context, in *GetPersonalRelationReq, out *GetPersonalRelationRsp) error {
	return h.RelationHandler.GetPersonalRelation(ctx, in, out)
}

func (h *relationHandler) ListPersonalRelation(ctx context.Context, in *ListPersonalRelationReq, out *ListPersonalRelationRsp) error {
	return h.RelationHandler.ListPersonalRelation(ctx, in, out)
}

func (h *relationHandler) CreateGroup(ctx context.Context, in *CreateGroupReq, out *CreateGroupRsp) error {
	return h.RelationHandler.CreateGroup(ctx, in, out)
}

func (h *relationHandler) GetGroup(ctx context.Context, in *GetGroupReq, out *GetGroupRsp) error {
	return h.RelationHandler.GetGroup(ctx, in, out)
}

func (h *relationHandler) ChangeGroupInfo(ctx context.Context, in *ChangeGroupInfoReq, out *ChangeGroupInfoRsp) error {
	return h.RelationHandler.ChangeGroupInfo(ctx, in, out)
}

func (h *relationHandler) UpgradeGroup(ctx context.Context, in *UpgradeGroupReq, out *UpgradeGroupRsp) error {
	return h.RelationHandler.UpgradeGroup(ctx, in, out)
}

func (h *relationHandler) JoinGroup(ctx context.Context, in *JoinGroupReq, out *JoinGroupRsp) error {
	return h.RelationHandler.JoinGroup(ctx, in, out)
}

func (h *relationHandler) QuitGroup(ctx context.Context, in *QuitGroupReq, out *QuitGroupRsp) error {
	return h.RelationHandler.QuitGroup(ctx, in, out)
}
