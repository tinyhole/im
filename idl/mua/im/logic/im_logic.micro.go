// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mua/im_logic.proto

/*
Package logic is a generated protocol buffer package.

It is generated from these files:
	mua/im_logic.proto

It has these top-level messages:
	PushMsgReq
	PushMsgRsp
	SignInReq
	SignInRsp
	PingReq
	PingRsp
	SessionInfo
	ListSessionInfoReq
	ListSessionInfoRsp
	BatchListSessionInfoReq
	BatchListSessionInfoRsp
*/
package logic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tinyhole/im/idl/mua/im"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Logic service

type LogicService interface {
	PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgRsp, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...client.CallOption) (*SignInRsp, error)
	Ping(ctx context.Context, in *PingReq, opts ...client.CallOption) (*PingRsp, error)
	ListSessionInfo(ctx context.Context, in *ListSessionInfoReq, opts ...client.CallOption) (*ListSessionInfoRsp, error)
	BatchListSessionInfo(ctx context.Context, in *BatchListSessionInfoReq, opts ...client.CallOption) (*BatchListSessionInfoRsp, error)
}

type logicService struct {
	c    client.Client
	name string
}

func NewLogicService(name string, c client.Client) LogicService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "mua.im.logic"
	}
	return &logicService{
		c:    c,
		name: name,
	}
}

func (c *logicService) PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgRsp, error) {
	req := c.c.NewRequest(c.name, "Logic.PushMsg", in)
	out := new(PushMsgRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicService) SignIn(ctx context.Context, in *SignInReq, opts ...client.CallOption) (*SignInRsp, error) {
	req := c.c.NewRequest(c.name, "Logic.SignIn", in)
	out := new(SignInRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicService) Ping(ctx context.Context, in *PingReq, opts ...client.CallOption) (*PingRsp, error) {
	req := c.c.NewRequest(c.name, "Logic.Ping", in)
	out := new(PingRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicService) ListSessionInfo(ctx context.Context, in *ListSessionInfoReq, opts ...client.CallOption) (*ListSessionInfoRsp, error) {
	req := c.c.NewRequest(c.name, "Logic.ListSessionInfo", in)
	out := new(ListSessionInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicService) BatchListSessionInfo(ctx context.Context, in *BatchListSessionInfoReq, opts ...client.CallOption) (*BatchListSessionInfoRsp, error) {
	req := c.c.NewRequest(c.name, "Logic.BatchListSessionInfo", in)
	out := new(BatchListSessionInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logic service

type LogicHandler interface {
	PushMsg(context.Context, *PushMsgReq, *PushMsgRsp) error
	SignIn(context.Context, *SignInReq, *SignInRsp) error
	Ping(context.Context, *PingReq, *PingRsp) error
	ListSessionInfo(context.Context, *ListSessionInfoReq, *ListSessionInfoRsp) error
	BatchListSessionInfo(context.Context, *BatchListSessionInfoReq, *BatchListSessionInfoRsp) error
}

func RegisterLogicHandler(s server.Server, hdlr LogicHandler, opts ...server.HandlerOption) error {
	type logic interface {
		PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgRsp) error
		SignIn(ctx context.Context, in *SignInReq, out *SignInRsp) error
		Ping(ctx context.Context, in *PingReq, out *PingRsp) error
		ListSessionInfo(ctx context.Context, in *ListSessionInfoReq, out *ListSessionInfoRsp) error
		BatchListSessionInfo(ctx context.Context, in *BatchListSessionInfoReq, out *BatchListSessionInfoRsp) error
	}
	type Logic struct {
		logic
	}
	h := &logicHandler{hdlr}
	return s.Handle(s.NewHandler(&Logic{h}, opts...))
}

type logicHandler struct {
	LogicHandler
}

func (h *logicHandler) PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgRsp) error {
	return h.LogicHandler.PushMsg(ctx, in, out)
}

func (h *logicHandler) SignIn(ctx context.Context, in *SignInReq, out *SignInRsp) error {
	return h.LogicHandler.SignIn(ctx, in, out)
}

func (h *logicHandler) Ping(ctx context.Context, in *PingReq, out *PingRsp) error {
	return h.LogicHandler.Ping(ctx, in, out)
}

func (h *logicHandler) ListSessionInfo(ctx context.Context, in *ListSessionInfoReq, out *ListSessionInfoRsp) error {
	return h.LogicHandler.ListSessionInfo(ctx, in, out)
}

func (h *logicHandler) BatchListSessionInfo(ctx context.Context, in *BatchListSessionInfoReq, out *BatchListSessionInfoRsp) error {
	return h.LogicHandler.BatchListSessionInfo(ctx, in, out)
}
