// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mua/im_job.proto

/*
Package job is a generated protocol buffer package.

It is generated from these files:
	mua/im_job.proto

It has these top-level messages:
	PullMsgReq
	PullMsgRsp
	SyncPrivateInboxMsgReq
	SyncPrivateInboxMsgRsp
	SyncPublicInboxMsgReq
	SyncPublicInboxMsgRsp
	MsgNotify
*/
package job

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tinyhole/im/idl/mua/im"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Job service

type JobService interface {
	PullMsg(ctx context.Context, in *PullMsgReq, opts ...client.CallOption) (*PullMsgRsp, error)
	SyncPrivateInboxMsg(ctx context.Context, in *SyncPrivateInboxMsgReq, opts ...client.CallOption) (*SyncPrivateInboxMsgRsp, error)
	SyncPublicInboxMsg(ctx context.Context, in *SyncPublicInboxMsgReq, opts ...client.CallOption) (*SyncPublicInboxMsgRsp, error)
}

type jobService struct {
	c    client.Client
	name string
}

func NewJobService(name string, c client.Client) JobService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "mua.im.job"
	}
	return &jobService{
		c:    c,
		name: name,
	}
}

func (c *jobService) PullMsg(ctx context.Context, in *PullMsgReq, opts ...client.CallOption) (*PullMsgRsp, error) {
	req := c.c.NewRequest(c.name, "Job.PullMsg", in)
	out := new(PullMsgRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) SyncPrivateInboxMsg(ctx context.Context, in *SyncPrivateInboxMsgReq, opts ...client.CallOption) (*SyncPrivateInboxMsgRsp, error) {
	req := c.c.NewRequest(c.name, "Job.SyncPrivateInboxMsg", in)
	out := new(SyncPrivateInboxMsgRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) SyncPublicInboxMsg(ctx context.Context, in *SyncPublicInboxMsgReq, opts ...client.CallOption) (*SyncPublicInboxMsgRsp, error) {
	req := c.c.NewRequest(c.name, "Job.SyncPublicInboxMsg", in)
	out := new(SyncPublicInboxMsgRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobHandler interface {
	PullMsg(context.Context, *PullMsgReq, *PullMsgRsp) error
	SyncPrivateInboxMsg(context.Context, *SyncPrivateInboxMsgReq, *SyncPrivateInboxMsgRsp) error
	SyncPublicInboxMsg(context.Context, *SyncPublicInboxMsgReq, *SyncPublicInboxMsgRsp) error
}

func RegisterJobHandler(s server.Server, hdlr JobHandler, opts ...server.HandlerOption) error {
	type job interface {
		PullMsg(ctx context.Context, in *PullMsgReq, out *PullMsgRsp) error
		SyncPrivateInboxMsg(ctx context.Context, in *SyncPrivateInboxMsgReq, out *SyncPrivateInboxMsgRsp) error
		SyncPublicInboxMsg(ctx context.Context, in *SyncPublicInboxMsgReq, out *SyncPublicInboxMsgRsp) error
	}
	type Job struct {
		job
	}
	h := &jobHandler{hdlr}
	return s.Handle(s.NewHandler(&Job{h}, opts...))
}

type jobHandler struct {
	JobHandler
}

func (h *jobHandler) PullMsg(ctx context.Context, in *PullMsgReq, out *PullMsgRsp) error {
	return h.JobHandler.PullMsg(ctx, in, out)
}

func (h *jobHandler) SyncPrivateInboxMsg(ctx context.Context, in *SyncPrivateInboxMsgReq, out *SyncPrivateInboxMsgRsp) error {
	return h.JobHandler.SyncPrivateInboxMsg(ctx, in, out)
}

func (h *jobHandler) SyncPublicInboxMsg(ctx context.Context, in *SyncPublicInboxMsgReq, out *SyncPublicInboxMsgRsp) error {
	return h.JobHandler.SyncPublicInboxMsg(ctx, in, out)
}
